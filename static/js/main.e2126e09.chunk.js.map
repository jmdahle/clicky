{"version":3,"sources":["components/GameCard/index.js","components/Wrapper/index.js","components/Score/index.js","components/GameOverDialog/index.js","components/GameInstructions/index.js","components/GameHeader/index.js","components/GameBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["GameCard","className","src","this","props","imgsrc","alt","onClick","clickCard","id","React","Component","Wrapper","children","Score","score","hiscore","GameOverDialog","gameover","gameoverMessage","maxscore","type","restartGame","GameInstructions","instructions","exitInstructions","href","showInstructions","GameHeader","GameBoard","state","cardArray","cardsClicked","suspendGame","shuffle","array","i","length","j","Math","floor","random","temp","setState","newCardsClicked","indexOf","endGame","scorePoint","push","msg","currentScore","gameCards","componentDidMount","maxcards","map","card","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2126e09.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass GameCard extends React.Component {\n    render () {\n        return (\n            <div className='game-card'>\n                <img \n                    src={this.props.imgsrc} \n                    alt='' \n                    onClick={() => this.props.clickCard(this.props.id)}\n                />\n            </div>\n        );\n    }\n}\n\nexport default GameCard;","import React from \"react\";\nimport \"./style.css\";\n\nclass Wrapper extends React.Component {\n  render() {\n    return (\n      <div className=\"container\">{this.props.children}</div>\n    );\n  }\n}\n\nexport default Wrapper;\n","import React from 'react';\nimport './style.css';\n\nclass Score extends React.Component {\n    render() {\n        return(\n            <span className='score'>\n                Score: {this.props.score}&nbsp;&nbsp;|&nbsp;&nbsp;Hi Score: {this.props.hiscore}\n            </span>\n        );\n    }\n}\n\nexport default Score;","import React from 'react';\nimport './style.css';\n\nclass GameOverDialog extends React.Component {\n    render () {\n        if (this.props.gameover === 1) {\n            return (\n                <div className='gameover'>\n                    <h3>{this.props.gameoverMessage}</h3>\n                    <p>Your final score was {this.props.score} out of a total possible {this.props.maxscore}.</p>\n                    <p>Click 'Restart' button to start a new game.</p>\n                    <button \n                        type='button' \n                        className='btn btn-primary'\n                        onClick={() => this.props.restartGame()}\n                    >Restart</button>\n                </div>\n        );\n        } else {\n            return (\n                <span> </span>\n            )\n        }\n    }\n}\n\nexport default GameOverDialog;","import React from 'react';\nimport './style.css';\n\nclass GameInstructions extends React.Component {\n    render () {\n        if (this.props.instructions === 1) {\n            return (\n                <div className='instructions'>\n                    <h3>How to Play the Clicky Game:</h3>\n                    <p>To score points, click any image card you have not clicked.  After every click, the image cards will shuffle to add some difficulty.  If you click an image card you have already selected, the game will end.</p>\n                    <p>Click 'Exit Instructions' return to the game.</p>\n                    <button \n                        type='button' \n                        className='btn btn-primary'\n                        onClick={this.props.exitInstructions}\n                    >Exit Instructions</button>\n                </div>\n            );\n        } else {\n            return (\n                <span className='ml-auto openinst'>\n                        <a href='#top' onClick={this.props.showInstructions}>Instructions</a>\n                </span>\n            )\n        }\n    }\n}\n\nexport default GameInstructions;","import React from 'react';\nimport './style.css'\n\nclass GameHeader extends React.Component {\n    render () {\n        return (\n            <div className='gameheader d-flex'>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default GameHeader","import React from 'react';\nimport GameCard from '../GameCard';\nimport Wrapper from '../Wrapper';\nimport Score from '../Score';\nimport GameOverDialog from '../GameOverDialog';\nimport GameInstructions from '../GameInstructions';\nimport GameHeader from '../GameHeader';\nimport gameCards from '../../gameCards.json';\n\nclass GameBoard extends React.Component {\n    state = {\n        cardArray: [],\n        cardsClicked: [],\n        suspendGame: 1, // 0=active; 1=suspended (cannot click cards)\n        instructions: 1, //0=hide instructions; 1=show instructions\n        score: 0,\n        hiscore: 0,\n        maxscore: 12,\n        gameover: 0, // 0=in progress; 1=game over\n        gameoverMessage: 'Game Over!'\n    }\n\n    shuffle = array => {\n        for (let i = array.length - 1; i > 0; i--) {\n          let j = Math.floor(Math.random() * (i + 1));\n          let temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        this.setState( { cardArray: array });\n    }\n\n    clickCard = (id) => {\n        // if game is supended, don't register the click\n        let isSuspended = this.state.suspendGame;\n        if (isSuspended === 0) {\n            // check if that ID has been clicked\n            // if yes, end the game; if no, score a point\n            let newCardsClicked = this.state.cardsClicked;\n            newCardsClicked.indexOf(id) > -1 ? this.endGame('Game Over!') : this.scorePoint(id)\n            // add the card to the cards clicked array\n            newCardsClicked.push(id);\n            this.setState( { cardsClicked: newCardsClicked })\n        }\n    }\n\n    endGame = (msg) => {\n        this.setState( { gameover: 1, suspendGame: 1, gameoverMessage: msg } );\n    }\n\n    showInstructions = () => {\n        this.setState( { instructions: 1, suspendGame: 1 } );\n    }\n    exitInstructions = () => {\n        this.setState( { instructions: 0, suspendGame: 0 } );\n    }\n\n    scorePoint = (id) => {\n        // add a point to the score\n        let currentScore = this.state.score + 1;\n        this.setState( { score: currentScore});\n        // re-set hiscore if score > hiscore\n        if (currentScore > this.state.hiscore) {\n            this.setState( { hiscore: currentScore } );\n        }\n        // did the user reach the maxscore?  If so, end game now\n        if (currentScore === this.state.maxscore) {\n            this.endGame('You WIN!');\n        }\n        // and shuffle the cards\n        this.shuffle(gameCards);\n    }\n\n    componentDidMount = () => {\n        // update state with maximum number of cards\n        let maxcards = gameCards.length;\n        this.setState( { maxscore: maxcards } );\n        this.shuffle(gameCards);\n    }\n    \n    restartGame = () => {\n        // re-set to beginning state (except cards, hiscore, and maxscore)\n        this.setState( {\n            cardsClicked: [],\n            score: 0,\n            gameover: 0,\n            instructions: 0,\n            suspendGame: 0\n        });\n        // re-shuffle\n        this.shuffle(gameCards);\n    }\n\n    render() {     \n        return (\n            <div className='gameboard'>\n            <Wrapper>\n                <GameOverDialog \n                    gameover = {this.state.gameover}\n                    gameoverMessage = {this.state.gameoverMessage} \n                    restartGame = {this.restartGame}\n                    score = {this.state.score}\n                    maxscore = {this.state.maxscore}\n                />\n                <GameHeader> \n                    <Score\n                        score = {this.state.score}\n                        hiscore = {this.state.hiscore}\n                    />\n                    <GameInstructions \n                        instructions = {this.state.instructions}\n                        exitInstructions = {this.exitInstructions}\n                        showInstructions = {this.showInstructions}\n                    />\n                </GameHeader>\n                {this.state.cardArray.map( card => (\n                    <GameCard \n                        id={card.id}\n                        key={card.id} \n                        imgsrc={card.imgsrc}\n                        clickCard = {this.clickCard}\n                    /> \n                ))}\n            </Wrapper>\n            </div>\n        )\n    }\n}\n\nexport default GameBoard;","import React from 'react';\nimport GameBoard from './components/GameBoard';\n\nclass App extends React.Component {\n  \n\n  render() {\n\n    return (\n      <div>\n        <GameBoard />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}